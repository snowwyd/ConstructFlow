definitions:
  domain.Approval:
    properties:
      annotation_text:
        type: string
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      file:
        $ref: '#/definitions/domain.File'
      file_id:
        type: integer
      id:
        type: integer
      status:
        type: string
      updatedAt:
        type: string
      workflow_id:
        type: integer
      workflow_order:
        type: integer
    type: object
  domain.Directory:
    properties:
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      files:
        items:
          $ref: '#/definitions/domain.File'
        type: array
      id:
        type: integer
      name:
        type: string
      parent_path_id:
        description: Указатель для NULL
        type: integer
      parentPath:
        $ref: '#/definitions/domain.Directory'
      status:
        type: string
      updatedAt:
        type: string
      users:
        items:
          $ref: '#/definitions/domain.User'
        type: array
      version:
        type: integer
      workflow_id:
        type: integer
    type: object
  domain.DirectoryResponse:
    description: Детальная информация о директории
    properties:
      files:
        items:
          $ref: '#/definitions/domain.FileResponse'
        type: array
      id:
        example: 123
        type: integer
      name_folder:
        example: Documents
        type: string
      parent_path_id:
        example: 456
        type: integer
      status:
        example: active
        type: string
    type: object
  domain.ErrorResponse:
    description: Стандартизированный ответ при ошибке API
    properties:
      error:
        properties:
          code:
            example: NOT_FOUND
            type: string
          message:
            example: Resource not found
            type: string
        type: object
    type: object
  domain.File:
    properties:
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      directory:
        $ref: '#/definitions/domain.Directory'
      directory_id:
        type: integer
      id:
        type: integer
      name:
        type: string
      status:
        type: string
      updatedAt:
        type: string
      users:
        items:
          $ref: '#/definitions/domain.User'
        type: array
      version:
        type: integer
    type: object
  domain.FileResponse:
    description: Детальная информация о файле
    properties:
      directory_id:
        example: 123
        type: integer
      id:
        example: 789
        type: integer
      name_file:
        example: report.pdf
        type: string
      status:
        example: draft
        type: string
    type: object
  domain.GetCurrentUserResponse:
    description: Информация о текущем пользователе
    properties:
      id:
        example: 1
        type: integer
      login:
        example: john_doe
        type: string
      role:
        example: user
        type: string
    type: object
  domain.GetFileTreeResponse:
    description: Ответ с древовидной структурой файлов и директорий
    properties:
      data:
        items:
          $ref: '#/definitions/domain.DirectoryResponse'
        type: array
    type: object
  domain.User:
    properties:
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      directories:
        items:
          $ref: '#/definitions/domain.Directory'
        type: array
      files:
        items:
          $ref: '#/definitions/domain.File'
        type: array
      id:
        type: integer
      login:
        type: string
      pass_hash:
        items:
          type: integer
        type: array
      roleID:
        type: integer
      updatedAt:
        type: string
    type: object
  gorm.DeletedAt:
    properties:
      time:
        type: string
      valid:
        description: Valid is true if Time is not NULL
        type: boolean
    type: object
info:
  contact: {}
paths:
  /api/v1/approval/{approval_id}/annotate:
    post:
      consumes:
      - application/json
      description: Добавляет сообщение (аннотацию) к одобрению
      parameters:
      - description: ID одобрения
        in: path
        name: approval_id
        required: true
        type: integer
      - description: Текст аннотации
        in: body
        name: message
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: Аннотация добавлена успешно
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Неверный ID одобрения или тело запроса
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "401":
          description: Пользователь не аутентифицирован
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "403":
          description: Нет прав для добавления аннотации
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "404":
          description: Одобрение не найдено
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
      summary: Добавить аннотацию к одобрению
      tags:
      - approval
  /api/v1/approval/{approval_id}/finalize:
    post:
      consumes:
      - application/json
      description: Завершает процесс одобрения для указанного одобрения
      parameters:
      - description: ID одобрения
        in: path
        name: approval_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Одобрение завершено успешно
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Неверный ID одобрения
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "401":
          description: Пользователь не аутентифицирован
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "403":
          description: Только последний пользователь может завершить
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "404":
          description: Одобрение не найдено
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
      summary: Завершить одобрение
      tags:
      - approval
  /api/v1/approval/{approval_id}/sign:
    post:
      consumes:
      - application/json
      description: Подписание одобрения указанным пользователем
      parameters:
      - description: ID одобрения
        in: path
        name: approval_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Одобрение подписано успешно
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Неверный ID одобрения
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "401":
          description: Пользователь не аутентифицирован
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "403":
          description: Нет прав для подписания или требуется завершение
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "404":
          description: Одобрение не найдено
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
      summary: Подписать одобрение
      tags:
      - approval
  /api/v1/approval/{file_id}/approve:
    post:
      consumes:
      - application/json
      description: Отправляет файл на одобрение
      parameters:
      - description: ID файла
        in: path
        name: file_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Файл отправлен на одобрение
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Неверный ID файла или файл не в состоянии черновика
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "404":
          description: Файл не найден
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
      summary: Одобрить файл
      tags:
      - approval
  /api/v1/approvals:
    get:
      consumes:
      - application/json
      description: Возвращает список одобрений для текущего пользователя
      produces:
      - application/json
      responses:
        "200":
          description: Список одобрений
          schema:
            items:
              $ref: '#/definitions/domain.Approval'
            type: array
        "401":
          description: Пользователь не аутентифицирован
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
      summary: Получить одобрения пользователя
      tags:
      - approval
  /api/v1/auth/login:
    post:
      consumes:
      - application/json
      description: Возвращает JWT токен при успешной аутентификации
      parameters:
      - description: Логин для входа
        in: body
        name: login
        required: true
        schema:
          type: string
      - description: Пароль для входа
        in: body
        name: password
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: Токен доступа
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Неверный запрос
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "401":
          description: Неверные учетные данные
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "404":
          description: Пользователь не найден
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
      summary: Аутентификация пользователя
      tags:
      - auth
  /api/v1/auth/me:
    get:
      description: Возвращает информацию о пользователе на основе JWT токена
      produces:
      - application/json
      responses:
        "200":
          description: Информация о пользователе
          schema:
            $ref: '#/definitions/domain.GetCurrentUserResponse'
        "401":
          description: Не авторизован
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "404":
          description: Пользователь не найден
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
      security:
      - JWT: []
      summary: Получение информации о текущем пользователе
      tags:
      - auth
  /api/v1/auth/register:
    post:
      consumes:
      - application/json
      description: Регистрирует нового пользователя и возвращает его ID
      parameters:
      - description: Логин пользователя
        in: body
        name: login
        required: true
        schema:
          type: string
      - description: Пароль пользователя
        in: body
        name: password
        required: true
        schema:
          type: string
      - description: ID роли, назначенной пользователю
        in: body
        name: role_id
        required: true
        schema:
          type: integer
      produces:
      - application/json
      responses:
        "201":
          description: ID созданного пользователя
          schema:
            additionalProperties:
              type: integer
            type: object
        "400":
          description: Неверный запрос
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "404":
          description: Роль не найдена
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "409":
          description: Пользователь с таким логином уже существует
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
      summary: Регистрация нового пользователя
      tags:
      - auth
  /api/v1/auth/role:
    post:
      consumes:
      - application/json
      description: Регистрирует новую роль и возвращает её ID
      parameters:
      - description: Название роли
        in: body
        name: role_name
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "201":
          description: ID созданной роли
          schema:
            additionalProperties:
              type: integer
            type: object
        "400":
          description: Неверный запрос
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "409":
          description: Роль с таким названием уже существует
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
      summary: Регистрация новой роли
      tags:
      - auth
  /api/v1/directories:
    delete:
      consumes:
      - application/json
      description: Удаляет директорию и все её связи
      parameters:
      - description: ID директории для удаления
        in: body
        name: directory_id
        required: true
        schema:
          type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Сообщение об успехе
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Неверный запрос
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "401":
          description: Не авторизован
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "403":
          description: Нет доступа
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "500":
          description: Внутренняя ошибка
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
      security:
      - JWT: []
      summary: Удалить директорию
      tags:
      - directories
    get:
      description: Возвращает структуру файлов и директорий для пользователя
      parameters:
      - description: Фильтр архивных элементов
        in: body
        name: is_archive
        schema:
          type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.GetFileTreeResponse'
        "400":
          description: Неверный запрос
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "401":
          description: Не авторизован
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "500":
          description: Внутренняя ошибка
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
      security:
      - JWT: []
      summary: Получить дерево файлов и директорий
      tags:
      - directories
  /api/v1/directories/upload:
    post:
      consumes:
      - application/json
      description: Создает директорию и связывает её с пользователем
      parameters:
      - description: ID родительской директории (null для корня)
        in: body
        name: parent_path_id
        required: true
        schema:
          type: integer
      - description: Название директории
        in: body
        name: name
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: ID созданной директории
          schema:
            additionalProperties:
              type: integer
            type: object
        "400":
          description: Неверный запрос
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "401":
          description: Не авторизован
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "403":
          description: Нет доступа
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "500":
          description: Внутренняя ошибка
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
      security:
      - JWT: []
      summary: Создать новую директорию
      tags:
      - directories
  /api/v1/files:
    delete:
      consumes:
      - application/json
      description: Удаляет файл и все его связи
      parameters:
      - description: ID файла для удаления
        in: body
        name: file_id
        required: true
        schema:
          type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Сообщение об успехе
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Неверный запрос
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "401":
          description: Не авторизован
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "403":
          description: Нет доступа
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "404":
          description: Файл не найден
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "500":
          description: Внутренняя ошибка
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
      security:
      - JWT: []
      summary: Удалить файл
      tags:
      - files
  /api/v1/files/{file_id}:
    get:
      description: Возвращает детали файла по его ID
      parameters:
      - description: ID файла
        in: path
        name: file_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.FileResponse'
        "400":
          description: Неверный запрос
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "401":
          description: Не авторизован
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "403":
          description: Нет доступа
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "404":
          description: Файл не найден
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "500":
          description: Внутренняя ошибка
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
      security:
      - JWT: []
      summary: Получить информацию о файле
      tags:
      - files
  /api/v1/files/upload:
    post:
      consumes:
      - application/json
      description: Создает файл и связывает его с пользователем
      parameters:
      - description: ID директории
        in: body
        name: directory_id
        required: true
        schema:
          type: integer
      - description: Имя файла
        in: body
        name: name
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: ID созданного файла
          schema:
            additionalProperties:
              type: integer
            type: object
        "400":
          description: Неверный запрос
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "401":
          description: Не авторизован
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "403":
          description: Нет доступа
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "500":
          description: Внутренняя ошибка
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
      security:
      - JWT: []
      summary: Загрузить файл
      tags:
      - files
swagger: "2.0"
