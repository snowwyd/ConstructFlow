definitions:
  gorm.DeletedAt:
    properties:
      time:
        type: string
      valid:
        description: Valid is true if Time is not NULL
        type: boolean
    type: object
  internal_controller.annotateApprovalInput:
    properties:
      message:
        type: string
    type: object
  internal_controller.loginInput:
    properties:
      login:
        type: string
      password:
        type: string
    type: object
  internal_controller.registerInput:
    properties:
      login:
        type: string
      password:
        type: string
      role_id:
        type: integer
    type: object
  internal_controller.registerRoleInput:
    properties:
      role_name:
        type: string
    type: object
  service-core_internal_domain.Approval:
    properties:
      annotation_text:
        type: string
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      file_id:
        type: integer
      id:
        type: integer
      status:
        type: string
      updatedAt:
        type: string
      workflow_id:
        type: integer
      workflow_order:
        type: integer
    type: object
  service-core_internal_domain.ErrorResponse:
    description: Стандартизированный ответ при ошибке API
    properties:
      error:
        properties:
          code:
            example: NOT_FOUND
            type: string
          message:
            example: Resource not found
            type: string
        type: object
    type: object
  service-core_internal_domain.GetCurrentUserResponse:
    description: Информация о текущем пользователе
    properties:
      id:
        example: 1
        type: integer
      login:
        example: john_doe
        type: string
      role:
        example: user
        type: string
    type: object
info:
  contact: {}
  description: API Core Microservice for Constructflow
  title: Constructflow Core
  version: "0.2"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Возвращает JWT токен при успешной аутентификации
      parameters:
      - description: Данные для входа
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/internal_controller.loginInput'
      produces:
      - application/json
      responses:
        "200":
          description: Токен доступа
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Неверный запрос
          schema:
            $ref: '#/definitions/service-core_internal_domain.ErrorResponse'
        "401":
          description: Неверные учетные данные
          schema:
            $ref: '#/definitions/service-core_internal_domain.ErrorResponse'
        "404":
          description: Пользователь не найден
          schema:
            $ref: '#/definitions/service-core_internal_domain.ErrorResponse'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/service-core_internal_domain.ErrorResponse'
      summary: Аутентификация пользователя
      tags:
      - auth
  /auth/me:
    get:
      description: Возвращает информацию о пользователе на основе JWT токена, извлеченного
        из заголовка Authorization.
      produces:
      - application/json
      responses:
        "200":
          description: Информация о пользователе
          schema:
            $ref: '#/definitions/service-core_internal_domain.GetCurrentUserResponse'
        "401":
          description: 'Не авторизован: отсутствует или недействителен JWT токен.'
          schema:
            $ref: '#/definitions/service-core_internal_domain.ErrorResponse'
        "404":
          description: 'Пользователь не найден: пользователь с указанным ID в токене
            не существует.'
          schema:
            $ref: '#/definitions/service-core_internal_domain.ErrorResponse'
        "500":
          description: 'Внутренняя ошибка сервера: не удалось получить информацию
            о пользователе.'
          schema:
            $ref: '#/definitions/service-core_internal_domain.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Получение информации о текущем пользователе
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Регистрирует нового пользователя на основе предоставленных данных
        (логин, пароль, ID роли) и возвращает HTTP статус 201 при успешной регистрации.
      parameters:
      - description: Данные для регистрации пользователя
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/internal_controller.registerInput'
      produces:
      - application/json
      responses:
        "201":
          description: Пользователь успешно зарегистрирован. Тело ответа пустое.
        "400":
          description: 'Неверный запрос: отсутствуют обязательные поля или некорректный
            формат данных.'
          schema:
            $ref: '#/definitions/service-core_internal_domain.ErrorResponse'
        "404":
          description: Роль с указанным ID не найдена.
          schema:
            $ref: '#/definitions/service-core_internal_domain.ErrorResponse'
        "409":
          description: 'Конфликт: пользователь с таким логином уже существует.'
          schema:
            $ref: '#/definitions/service-core_internal_domain.ErrorResponse'
        "500":
          description: 'Внутренняя ошибка сервера: не удалось зарегистрировать пользователя.'
          schema:
            $ref: '#/definitions/service-core_internal_domain.ErrorResponse'
      summary: Регистрация нового пользователя
      tags:
      - auth
  /auth/role:
    post:
      consumes:
      - application/json
      description: Регистрирует новую роль на основе предоставленного названия и возвращает
        HTTP статус 201 при успешной регистрации.
      parameters:
      - description: Название роли
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/internal_controller.registerRoleInput'
      produces:
      - application/json
      responses:
        "201":
          description: ID созданной роли
          schema:
            additionalProperties:
              type: integer
            type: object
        "400":
          description: 'Неверный запрос: отсутствует название роли или некорректный
            формат данных.'
          schema:
            $ref: '#/definitions/service-core_internal_domain.ErrorResponse'
        "409":
          description: 'Конфликт: роль с таким названием уже существует.'
          schema:
            $ref: '#/definitions/service-core_internal_domain.ErrorResponse'
        "500":
          description: 'Внутренняя ошибка сервера: не удалось зарегистрировать роль.'
          schema:
            $ref: '#/definitions/service-core_internal_domain.ErrorResponse'
      summary: Регистрация новой роли
      tags:
      - auth
  /file-approvals:
    get:
      consumes:
      - application/json
      description: Возвращает все согласования, в которых участвует текущий пользователь
      produces:
      - application/json
      responses:
        "200":
          description: Список согласований
          schema:
            items:
              $ref: '#/definitions/service-core_internal_domain.Approval'
            type: array
        "401":
          description: Отсутствует/недействителен API-ключ
          schema:
            $ref: '#/definitions/service-core_internal_domain.ErrorResponse'
        "500":
          description: Ошибка при получении данных
          schema:
            $ref: '#/definitions/service-core_internal_domain.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Получить список согласований пользователя
      tags:
      - approval
  /file-approvals/{approval_id}/annotate:
    put:
      consumes:
      - application/json
      description: Добавляет примечание к согласованию. Пользователь должен участвовать
        в этом согласовании.
      parameters:
      - description: ID согласования (числовой формат)
        in: path
        name: approval_id
        required: true
        type: string
      - description: Текст примечания
        in: body
        name: message
        required: true
        schema:
          $ref: '#/definitions/internal_controller.annotateApprovalInput'
      produces:
      - application/json
      responses:
        "204":
          description: Примечание добавлено
        "400":
          description: Невалидный ID или тело запроса
          schema:
            $ref: '#/definitions/service-core_internal_domain.ErrorResponse'
        "401":
          description: Отсутствует/недействителен API-ключ
          schema:
            $ref: '#/definitions/service-core_internal_domain.ErrorResponse'
        "403":
          description: Пользователь не участвует в согласовании
          schema:
            $ref: '#/definitions/service-core_internal_domain.ErrorResponse'
        "404":
          description: Согласование не найдено
          schema:
            $ref: '#/definitions/service-core_internal_domain.ErrorResponse'
        "500":
          description: Ошибка при добавлении примечания
          schema:
            $ref: '#/definitions/service-core_internal_domain.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Добавить комментарий к согласованию
      tags:
      - approval
  /file-approvals/{approval_id}/finalize:
    put:
      consumes:
      - application/json
      description: Завершает процесс согласования. Доступно только последнему участнику
        в цепочке.
      parameters:
      - description: ID согласования (числовой формат)
        in: path
        name: approval_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: Согласование завершено
        "400":
          description: Невалидный ID согласования
          schema:
            $ref: '#/definitions/service-core_internal_domain.ErrorResponse'
        "401":
          description: Отсутствует/недействителен API-ключ
          schema:
            $ref: '#/definitions/service-core_internal_domain.ErrorResponse'
        "403":
          description: Только последний участник может завершить согласование
          schema:
            $ref: '#/definitions/service-core_internal_domain.ErrorResponse'
        "404":
          description: Согласование не найдено
          schema:
            $ref: '#/definitions/service-core_internal_domain.ErrorResponse'
        "500":
          description: Ошибка при завершении согласования
          schema:
            $ref: '#/definitions/service-core_internal_domain.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Завершить согласование
      tags:
      - approval
  /file-approvals/{approval_id}/sign:
    put:
      consumes:
      - application/json
      description: Подтверждает согласование текущим пользователем. Пользователь должен
        иметь права на подписание.
      parameters:
      - description: 'ID согласования (числовой формат, например: 456)'
        in: path
        name: approval_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: Согласование успешно подписано
        "400":
          description: Невалидный ID согласования
          schema:
            $ref: '#/definitions/service-core_internal_domain.ErrorResponse'
        "401":
          description: Отсутствует/недействителен API-ключ
          schema:
            $ref: '#/definitions/service-core_internal_domain.ErrorResponse'
        "403":
          description: Недостаточно прав или требуется завершение согласования
          schema:
            $ref: '#/definitions/service-core_internal_domain.ErrorResponse'
        "404":
          description: Согласование не найдено
          schema:
            $ref: '#/definitions/service-core_internal_domain.ErrorResponse'
        "500":
          description: Ошибка при обработке подписи
          schema:
            $ref: '#/definitions/service-core_internal_domain.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Подписать согласование
      tags:
      - approval
  /files/{file_id}/approve:
    put:
      consumes:
      - application/json
      description: Переводит файл в статус "на согласовании". Файл должен находиться
        в состоянии черновика.
      parameters:
      - description: 'ID файла (числовой формат, например: 123)'
        in: path
        name: file_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Файл успешно отправлен на согласование
        "400":
          description: Невалидный ID файла или файл не в статусе 'черновик'
          schema:
            $ref: '#/definitions/service-core_internal_domain.ErrorResponse'
        "404":
          description: Файл с указанным ID не найден
          schema:
            $ref: '#/definitions/service-core_internal_domain.ErrorResponse'
        "500":
          description: Ошибка при изменении статуса файла
          schema:
            $ref: '#/definitions/service-core_internal_domain.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Отправить файл на согласование
      tags:
      - approval
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
