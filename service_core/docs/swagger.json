{
    "swagger": "2.0",
    "info": {
        "description": "API Core Microservice for Constructflow",
        "title": "Constructflow Core",
        "contact": {},
        "version": "0.2"
    },
    "paths": {
        "/auth/login": {
            "post": {
                "description": "Возвращает JWT токен при успешной аутентификации",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Аутентификация пользователя",
                "parameters": [
                    {
                        "description": "Данные для входа",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/internal_controller.loginInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Токен доступа",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Неверный запрос",
                        "schema": {
                            "$ref": "#/definitions/service-core_internal_domain.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Неверные учетные данные",
                        "schema": {
                            "$ref": "#/definitions/service-core_internal_domain.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Пользователь не найден",
                        "schema": {
                            "$ref": "#/definitions/service-core_internal_domain.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера",
                        "schema": {
                            "$ref": "#/definitions/service-core_internal_domain.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/me": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Возвращает информацию о пользователе на основе JWT токена, извлеченного из заголовка Authorization.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Получение информации о текущем пользователе",
                "responses": {
                    "200": {
                        "description": "Информация о пользователе",
                        "schema": {
                            "$ref": "#/definitions/service-core_internal_domain.GetCurrentUserResponse"
                        }
                    },
                    "401": {
                        "description": "Не авторизован: отсутствует или недействителен JWT токен.",
                        "schema": {
                            "$ref": "#/definitions/service-core_internal_domain.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Пользователь не найден: пользователь с указанным ID в токене не существует.",
                        "schema": {
                            "$ref": "#/definitions/service-core_internal_domain.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера: не удалось получить информацию о пользователе.",
                        "schema": {
                            "$ref": "#/definitions/service-core_internal_domain.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/register": {
            "post": {
                "description": "Регистрирует нового пользователя на основе предоставленных данных (логин, пароль, ID роли) и возвращает HTTP статус 201 при успешной регистрации.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Регистрация нового пользователя",
                "parameters": [
                    {
                        "description": "Данные для регистрации пользователя",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/internal_controller.registerInput"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Пользователь успешно зарегистрирован. Тело ответа пустое."
                    },
                    "400": {
                        "description": "Неверный запрос: отсутствуют обязательные поля или некорректный формат данных.",
                        "schema": {
                            "$ref": "#/definitions/service-core_internal_domain.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Роль с указанным ID не найдена.",
                        "schema": {
                            "$ref": "#/definitions/service-core_internal_domain.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Конфликт: пользователь с таким логином уже существует.",
                        "schema": {
                            "$ref": "#/definitions/service-core_internal_domain.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера: не удалось зарегистрировать пользователя.",
                        "schema": {
                            "$ref": "#/definitions/service-core_internal_domain.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/role": {
            "post": {
                "description": "Регистрирует новую роль на основе предоставленного названия и возвращает HTTP статус 201 при успешной регистрации.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Регистрация новой роли",
                "parameters": [
                    {
                        "description": "Название роли",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/internal_controller.registerRoleInput"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "ID созданной роли",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "integer"
                            }
                        }
                    },
                    "400": {
                        "description": "Неверный запрос: отсутствует название роли или некорректный формат данных.",
                        "schema": {
                            "$ref": "#/definitions/service-core_internal_domain.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Конфликт: роль с таким названием уже существует.",
                        "schema": {
                            "$ref": "#/definitions/service-core_internal_domain.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера: не удалось зарегистрировать роль.",
                        "schema": {
                            "$ref": "#/definitions/service-core_internal_domain.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/file-approvals": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Возвращает все согласования, в которых участвует текущий пользователь",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "approval"
                ],
                "summary": "Получить список согласований пользователя",
                "responses": {
                    "200": {
                        "description": "Список согласований",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/service-core_internal_domain.Approval"
                            }
                        }
                    },
                    "401": {
                        "description": "Отсутствует/недействителен API-ключ",
                        "schema": {
                            "$ref": "#/definitions/service-core_internal_domain.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Ошибка при получении данных",
                        "schema": {
                            "$ref": "#/definitions/service-core_internal_domain.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/file-approvals/{approval_id}/annotate": {
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Добавляет примечание к согласованию. Пользователь должен участвовать в этом согласовании.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "approval"
                ],
                "summary": "Добавить комментарий к согласованию",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID согласования (числовой формат)",
                        "name": "approval_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Текст примечания",
                        "name": "message",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/internal_controller.annotateApprovalInput"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Примечание добавлено"
                    },
                    "400": {
                        "description": "Невалидный ID или тело запроса",
                        "schema": {
                            "$ref": "#/definitions/service-core_internal_domain.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Отсутствует/недействителен API-ключ",
                        "schema": {
                            "$ref": "#/definitions/service-core_internal_domain.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Пользователь не участвует в согласовании",
                        "schema": {
                            "$ref": "#/definitions/service-core_internal_domain.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Согласование не найдено",
                        "schema": {
                            "$ref": "#/definitions/service-core_internal_domain.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Ошибка при добавлении примечания",
                        "schema": {
                            "$ref": "#/definitions/service-core_internal_domain.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/file-approvals/{approval_id}/finalize": {
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Завершает процесс согласования. Доступно только последнему участнику в цепочке.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "approval"
                ],
                "summary": "Завершить согласование",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID согласования (числовой формат)",
                        "name": "approval_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Согласование завершено"
                    },
                    "400": {
                        "description": "Невалидный ID согласования",
                        "schema": {
                            "$ref": "#/definitions/service-core_internal_domain.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Отсутствует/недействителен API-ключ",
                        "schema": {
                            "$ref": "#/definitions/service-core_internal_domain.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Только последний участник может завершить согласование",
                        "schema": {
                            "$ref": "#/definitions/service-core_internal_domain.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Согласование не найдено",
                        "schema": {
                            "$ref": "#/definitions/service-core_internal_domain.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Ошибка при завершении согласования",
                        "schema": {
                            "$ref": "#/definitions/service-core_internal_domain.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/file-approvals/{approval_id}/sign": {
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Подтверждает согласование текущим пользователем. Пользователь должен иметь права на подписание.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "approval"
                ],
                "summary": "Подписать согласование",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID согласования (числовой формат, например: 456)",
                        "name": "approval_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Согласование успешно подписано"
                    },
                    "400": {
                        "description": "Невалидный ID согласования",
                        "schema": {
                            "$ref": "#/definitions/service-core_internal_domain.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Отсутствует/недействителен API-ключ",
                        "schema": {
                            "$ref": "#/definitions/service-core_internal_domain.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Недостаточно прав или требуется завершение согласования",
                        "schema": {
                            "$ref": "#/definitions/service-core_internal_domain.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Согласование не найдено",
                        "schema": {
                            "$ref": "#/definitions/service-core_internal_domain.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Ошибка при обработке подписи",
                        "schema": {
                            "$ref": "#/definitions/service-core_internal_domain.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/files/{file_id}/approve": {
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Переводит файл в статус \"на согласовании\". Файл должен находиться в состоянии черновика.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "approval"
                ],
                "summary": "Отправить файл на согласование",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID файла (числовой формат, например: 123)",
                        "name": "file_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Файл успешно отправлен на согласование"
                    },
                    "400": {
                        "description": "Невалидный ID файла или файл не в статусе 'черновик'",
                        "schema": {
                            "$ref": "#/definitions/service-core_internal_domain.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Файл с указанным ID не найден",
                        "schema": {
                            "$ref": "#/definitions/service-core_internal_domain.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Ошибка при изменении статуса файла",
                        "schema": {
                            "$ref": "#/definitions/service-core_internal_domain.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "gorm.DeletedAt": {
            "type": "object",
            "properties": {
                "time": {
                    "type": "string"
                },
                "valid": {
                    "description": "Valid is true if Time is not NULL",
                    "type": "boolean"
                }
            }
        },
        "internal_controller.annotateApprovalInput": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "internal_controller.loginInput": {
            "type": "object",
            "properties": {
                "login": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "internal_controller.registerInput": {
            "type": "object",
            "properties": {
                "login": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "role_id": {
                    "type": "integer"
                }
            }
        },
        "internal_controller.registerRoleInput": {
            "type": "object",
            "properties": {
                "role_name": {
                    "type": "string"
                }
            }
        },
        "service-core_internal_domain.Approval": {
            "type": "object",
            "properties": {
                "annotation_text": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "deletedAt": {
                    "$ref": "#/definitions/gorm.DeletedAt"
                },
                "file_id": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "status": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                },
                "workflow_id": {
                    "type": "integer"
                },
                "workflow_order": {
                    "type": "integer"
                }
            }
        },
        "service-core_internal_domain.ErrorResponse": {
            "description": "Стандартизированный ответ при ошибке API",
            "type": "object",
            "properties": {
                "error": {
                    "type": "object",
                    "properties": {
                        "code": {
                            "type": "string",
                            "example": "NOT_FOUND"
                        },
                        "message": {
                            "type": "string",
                            "example": "Resource not found"
                        }
                    }
                }
            }
        },
        "service-core_internal_domain.GetCurrentUserResponse": {
            "description": "Информация о текущем пользователе",
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "login": {
                    "type": "string",
                    "example": "john_doe"
                },
                "role": {
                    "type": "string",
                    "example": "user"
                }
            }
        }
    },
    "securityDefinitions": {
        "ApiKeyAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}